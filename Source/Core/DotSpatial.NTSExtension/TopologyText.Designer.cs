//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

namespace DotSpatial.NTSExtension {
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [DebuggerNonUserCode()]
    [CompilerGenerated()]
    internal class TopologyText {
        
        private static ResourceManager resourceMan;
        
        private static CultureInfo resourceCulture;
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TopologyText() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static ResourceManager ResourceManager {
            get {
                if (ReferenceEquals(resourceMan, null)) {
                    ResourceManager temp = new ResourceManager("DotSpatial.Topology.TopologyText", typeof(TopologyText).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal static CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument %S cannot be negative..
        /// </summary>
        internal static string ArgumentCannotBeNegative_S {
            get {
                return ResourceManager.GetString("ArgumentCannotBeNegative_S", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument %S1 could not be successfully cast into %S2..
        /// </summary>
        internal static string ArgumentCouldNotBeCast_S1_S2 {
            get {
                return ResourceManager.GetString("ArgumentCouldNotBeCast_S1_S2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument %S was outside the range of accepted values..
        /// </summary>
        internal static string ArgumentOutOfRangeException_S {
            get {
                return ResourceManager.GetString("ArgumentOutOfRangeException_S", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tail index greater than capacity.
        /// </summary>
        internal static string CharBuffer_IndexToBig {
            get {
                return ResourceManager.GetString("CharBuffer_IndexToBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class %S is not supported..
        /// </summary>
        internal static string ClassNotSupportedException_S {
            get {
                return ResourceManager.GetString("ClassNotSupportedException_S", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of ordinates did not match between the dimensions, so the hyperdistance cannot be accurately calculated..
        /// </summary>
        internal static string CoordinateMismatchException {
            get {
                return ResourceManager.GetString("CoordinateMismatchException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The same directed edge appeared more than once..
        /// </summary>
        internal static string DuplicateEdgeException {
            get {
                return ResourceManager.GetString("DuplicateEdgeException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to found non-noded intersection between {0} and {1} .
        /// </summary>
        internal static string FastNodingValidator_FoundNonNodedIntersection {
            get {
                return ResourceManager.GetString("FastNodingValidator_FoundNonNodedIntersection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to no intersections found.
        /// </summary>
        internal static string FastNodingValidator_NoIntersectionFound {
            get {
                return ResourceManager.GetString("FastNodingValidator_NoIntersectionFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Geometry collections are not supported for this method..
        /// </summary>
        internal static string GeometryCollectionNotSupportedException {
            get {
                return ResourceManager.GetString("GeometryCollectionNotSupportedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of dimensions in at least one argument is insufficient for this calculation..
        /// </summary>
        internal static string InsufficientDimensions {
            get {
                return ResourceManager.GetString("InsufficientDimensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of dimensions in %S is insufficient for this calculation..
        /// </summary>
        internal static string InsufficientDimensions_S {
            get {
                return ResourceManager.GetString("InsufficientDimensions_S", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid octant was specified: %S.
        /// </summary>
        internal static string InvalidOctantException_S {
            get {
                return ResourceManager.GetString("InvalidOctantException_S", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified key already exists in the tree..
        /// </summary>
        internal static string KeyDuplicateException {
            get {
                return ResourceManager.GetString("KeyDuplicateException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified key could not be found in the tree..
        /// </summary>
        internal static string KeyMissingException {
            get {
                return ResourceManager.GetString("KeyMissingException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the key did not match the size of the tree..
        /// </summary>
        internal static string KeySizeException {
            get {
                return ResourceManager.GetString("KeySizeException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting line segments in a ISegmentString not supported..
        /// </summary>
        internal static string NodedSegmentString_UnsupportedSettingLinesegments {
            get {
                return ResourceManager.GetString("NodedSegmentString_UnsupportedSettingLinesegments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter must be greater than or equal to 0 and less than TotalItemCount..
        /// </summary>
        internal static string NodedSegmentString_WrongParameterSize {
            get {
                return ResourceManager.GetString("NodedSegmentString_WrongParameterSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to found endpoint/interior point intersection at index {0} :pt {1}.
        /// </summary>
        internal static string NodingValidator_FoundEndPointInteriorPointIntersection {
            get {
                return ResourceManager.GetString("NodingValidator_FoundEndPointInteriorPointIntersection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to found non-noded collapse at: {0}, {1} {2}.
        /// </summary>
        internal static string NodingValidator_FoundNonNodedCollapse {
            get {
                return ResourceManager.GetString("NodingValidator_FoundNonNodedCollapse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to found non-noded intersection at {0}-{1} and {2}-{3}.
        /// </summary>
        internal static string NodingValidator_FoundNonNodedIntersection {
            get {
                return ResourceManager.GetString("NodingValidator_FoundNonNodedIntersection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found null Directed Edge in ring.
        /// </summary>
        internal static string NullEdgeException {
            get {
                return ResourceManager.GetString("NullEdgeException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Holes must not contain null elements.
        /// </summary>
        internal static string PolygonException_HoleElementNull {
            get {
                return ResourceManager.GetString("PolygonException_HoleElementNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shell is empty but holes are not.
        /// </summary>
        internal static string PolygonException_ShellEmptyButHolesNot {
            get {
                return ResourceManager.GetString("PolygonException_ShellEmptyButHolesNot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ICollection is read-only..
        /// </summary>
        internal static string ReadOnlyException {
            get {
                return ResourceManager.GetString("ReadOnlyException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Points in shell and hole appear to be equal.
        /// </summary>
        internal static string ShellHoleIdentityException {
            get {
                return ResourceManager.GetString("ShellHoleIdentityException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The code execution should never have reached this location..
        /// </summary>
        internal static string ShouldNeverReachHereException {
            get {
                return ResourceManager.GetString("ShouldNeverReachHereException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Side location conflict at.
        /// </summary>
        internal static string SideLocationConflict {
            get {
                return ResourceManager.GetString("SideLocationConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found single null side at.
        /// </summary>
        internal static string SingleNullSide {
            get {
                return ResourceManager.GetString("SingleNullSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assigned depths do not match.
        /// </summary>
        internal static string TopologyException_Depth {
            get {
                return ResourceManager.GetString("TopologyException_Depth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found two horizontal edges incident on node..
        /// </summary>
        internal static string TwoHorizontalEdgesException {
            get {
                return ResourceManager.GetString("TwoHorizontalEdgesException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported Geometry classes should be caught in the GeometryEditorOperation..
        /// </summary>
        internal static string UnsupportedGeometryException {
            get {
                return ResourceManager.GetString("UnsupportedGeometryException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tab count must be positive.
        /// </summary>
        internal static string WktWriter_NegativeTabCount {
            get {
                return ResourceManager.GetString("WktWriter_NegativeTabCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output dimension must be in the range [2, 3].
        /// </summary>
        internal static string WktWriter_WrongOutputDimension {
            get {
                return ResourceManager.GetString("WktWriter_WrongOutputDimension", resourceCulture);
            }
        }
    }
}
