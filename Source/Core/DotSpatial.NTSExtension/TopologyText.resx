<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeNegative_S" xml:space="preserve">
    <value>The argument %S cannot be negative.</value>
  </data>
  <data name="ArgumentCouldNotBeCast_S1_S2" xml:space="preserve">
    <value>The argument %S1 could not be successfully cast into %S2.</value>
  </data>
  <data name="ArgumentOutOfRangeException_S" xml:space="preserve">
    <value>The argument %S was outside the range of accepted values.</value>
  </data>
  <data name="ClassNotSupportedException_S" xml:space="preserve">
    <value>The class %S is not supported.</value>
  </data>
  <data name="CoordinateMismatchException" xml:space="preserve">
    <value>The number of ordinates did not match between the dimensions, so the hyperdistance cannot be accurately calculated.</value>
  </data>
  <data name="DuplicateEdgeException" xml:space="preserve">
    <value>The same directed edge appeared more than once.</value>
  </data>
  <data name="GeometryCollectionNotSupportedException" xml:space="preserve">
    <value>Geometry collections are not supported for this method.</value>
  </data>
  <data name="InsufficientDimensions" xml:space="preserve">
    <value>The number of dimensions in at least one argument is insufficient for this calculation.</value>
  </data>
  <data name="InsufficientDimensions_S" xml:space="preserve">
    <value>The number of dimensions in %S is insufficient for this calculation.</value>
  </data>
  <data name="InvalidOctantException_S" xml:space="preserve">
    <value>An invalid octant was specified: %S</value>
  </data>
  <data name="KeyDuplicateException" xml:space="preserve">
    <value>The specified key already exists in the tree.</value>
  </data>
  <data name="KeyMissingException" xml:space="preserve">
    <value>The specified key could not be found in the tree.</value>
  </data>
  <data name="KeySizeException" xml:space="preserve">
    <value>The size of the key did not match the size of the tree.</value>
  </data>
  <data name="NullEdgeException" xml:space="preserve">
    <value>Found null Directed Edge in ring</value>
  </data>
  <data name="PolygonException_HoleElementNull" xml:space="preserve">
    <value>Holes must not contain null elements</value>
  </data>
  <data name="PolygonException_ShellEmptyButHolesNot" xml:space="preserve">
    <value>Shell is empty but holes are not</value>
  </data>
  <data name="ReadOnlyException" xml:space="preserve">
    <value>The ICollection is read-only.</value>
  </data>
  <data name="ShellHoleIdentityException" xml:space="preserve">
    <value>Points in shell and hole appear to be equal</value>
  </data>
  <data name="ShouldNeverReachHereException" xml:space="preserve">
    <value>The code execution should never have reached this location.</value>
  </data>
  <data name="SideLocationConflict" xml:space="preserve">
    <value>Side location conflict at</value>
  </data>
  <data name="SingleNullSide" xml:space="preserve">
    <value>Found single null side at</value>
  </data>
  <data name="TopologyException_Depth" xml:space="preserve">
    <value>Assigned depths do not match</value>
  </data>
  <data name="TwoHorizontalEdgesException" xml:space="preserve">
    <value>Found two horizontal edges incident on node.</value>
  </data>
  <data name="UnsupportedGeometryException" xml:space="preserve">
    <value>Unsupported Geometry classes should be caught in the GeometryEditorOperation.</value>
  </data>
  <data name="NodedSegmentString_WrongParameterSize" xml:space="preserve">
    <value>Parameter must be greater than or equal to 0 and less than TotalItemCount.</value>
  </data>
  <data name="NodedSegmentString_UnsupportedSettingLinesegments" xml:space="preserve">
    <value>Setting line segments in a ISegmentString not supported.</value>
  </data>
  <data name="WktWriter_WrongOutputDimension" xml:space="preserve">
    <value>Output dimension must be in the range [2, 3]</value>
  </data>
  <data name="WktWriter_NegativeTabCount" xml:space="preserve">
    <value>Tab count must be positive</value>
  </data>
  <data name="NodingValidator_FoundNonNodedIntersection" xml:space="preserve">
    <value>found non-noded intersection at {0}-{1} and {2}-{3}</value>
  </data>
  <data name="NodingValidator_FoundEndPointInteriorPointIntersection" xml:space="preserve">
    <value>found endpoint/interior point intersection at index {0} :pt {1}</value>
  </data>
  <data name="NodingValidator_FoundNonNodedCollapse" xml:space="preserve">
    <value>found non-noded collapse at: {0}, {1} {2}</value>
  </data>
  <data name="FastNodingValidator_NoIntersectionFound" xml:space="preserve">
    <value>no intersections found</value>
  </data>
  <data name="FastNodingValidator_FoundNonNodedIntersection" xml:space="preserve">
    <value>found non-noded intersection between {0} and {1} </value>
  </data>
  <data name="CharBuffer_IndexToBig" xml:space="preserve">
    <value>Tail index greater than capacity</value>
  </data>
</root>