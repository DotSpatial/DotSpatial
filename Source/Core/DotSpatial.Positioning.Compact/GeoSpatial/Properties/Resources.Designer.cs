//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotSpatial.Positioning.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotSpatial.Positioning.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extra characters were encountered while parsing an angular measurement.  Only hours, minutes, and seconds are allowed..
        /// </summary>
        internal static string Angle_ExtraCharactersWereEncountered {
            get {
                return ResourceManager.GetString("Angle_ExtraCharactersWereEncountered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as an angular measurement..
        /// </summary>
        internal static string Angle_InvalidFormat {
            get {
                return ResourceManager.GetString("Angle_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interval must be a value greater than zero, between 0 and 60..
        /// </summary>
        internal static string Angle_InvalidInterval {
            get {
                return ResourceManager.GetString("Angle_InvalidInterval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format for Angle.ToString() method..
        /// </summary>
        internal static string Angle_InvalidToStringFormat {
            get {
                return ResourceManager.GetString("Angle_InvalidToStringFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the right-most number of a sexagesimal measurement can be a fractional value..
        /// </summary>
        internal static string Angle_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Angle_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Angle can only be compared with Angle, Double, or String values..
        /// </summary>
        internal static string Angle_TypeMismatch {
            get {
                return ResourceManager.GetString("Angle_TypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as an area measurement..
        /// </summary>
        internal static string Area_InvalidFormat {
            get {
                return ResourceManager.GetString("Area_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The numeric portion of the area measurement could not be recognized..
        /// </summary>
        internal static string Area_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Area_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unit portion of the area measurement could not be recognized..
        /// </summary>
        internal static string Area_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Area_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The azimuth cannot be converted to a because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types..
        /// </summary>
        internal static string Azimuth_ConversionNotImplemented {
            get {
                return ResourceManager.GetString("Azimuth_ConversionNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Azimuth can only be compared with another Azimuth, or a Double..
        /// </summary>
        internal static string Azimuth_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Azimuth_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty.
        /// </summary>
        internal static string Common_Empty {
            get {
                return ResourceManager.GetString("Common_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Infinity.
        /// </summary>
        internal static string Common_Infinity {
            get {
                return ResourceManager.GetString("Common_Infinity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The distance cannot be converted because no conversion has been implemented internally.  Please contact info@DotSpatial.Positioning.com with the source and destination unit types..
        /// </summary>
        internal static string Distance_ConversionNotImplemented {
            get {
                return ResourceManager.GetString("Distance_ConversionNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Distance objects can only be compared with other Distance objects..
        /// </summary>
        internal static string Distance_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Distance_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as a distance measurement..
        /// </summary>
        internal static string Distance_InvalidFormat {
            get {
                return ResourceManager.GetString("Distance_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The numeric portion of the distance measurement could not be recognized..
        /// </summary>
        internal static string Distance_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Distance_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unit portion of the distance measurement could not be recognized..
        /// </summary>
        internal static string Distance_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Distance_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified license key is invalid.  Please contact DotSpatial.Positioning to look up license keys you have purchased: http://dotspatial.codeplex.com/Secured/LicenseKeys.aspx..
        /// </summary>
        internal static string DotSpatial_PositioningLicense_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicense_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Would you like to go online now to activate your trial?  An email address will not be required unless you&apos;re behind a proxy server..
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_AskToGoOnline {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_AskToGoOnline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Stopped Execution.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedDialogTitle {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided, or the reference the assembly has been removed..
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedNeedKeys {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedNeedKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execution of the current application has been stopped by an exception, but this message will go away once trial license keys have been provided.  Please visit http://dotspatial.codeplex.com/FreeTrialLicenseKeys.aspx to obtain free license keys for any of our products..
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ExecutionStoppedVisitWebSite {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ExecutionStoppedVisitWebSite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to go online to activate free trial license keys?.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_GoOnlineForTrialKeys {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_GoOnlineForTrialKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid license key was encountered while attempting to grant a license to a DotSpatial.Positioning object.  The invalid key is &quot;{0}&quot;.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license key for {0} is valid for a different major version of the software.  Please visit http://dotspatial.codeplex.com/Shop for pricing on products for this version.  Updates to DotSpatial.Positioning software are always free for each minor version change (e.g. versions 2.0 through 2.999).
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidMajorVersion {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidMajorVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license key for {0} is not valid for the current .NET platform.  Please contact support@DotSpatial.Positioning.com for assistance or visit http://dotspatial.codeplex.com/Shop for pricing on products for this platform..
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_InvalidPlatform {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_InvalidPlatform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DotSpatial.Positioning License Key Is Required.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_LicenseKeyDialogTitle {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_LicenseKeyDialogTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A license key is required for this DotSpatial.Positioning assembly to function.  You can activate a free thirty-day trial online at http://dotspatial.codeplex.com..
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_LicenseKeyIsRequired {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_LicenseKeyIsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid owner license has been granted for {0}.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ValidOwnerLicense {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ValidOwnerLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A trial license has been granted for {0} until {1}.
        /// </summary>
        internal static string DotSpatial_PositioningLicenseProvider_ValidTrialLicense {
            get {
                return ResourceManager.GetString("DotSpatial.PositioningLicenseProvider_ValidTrialLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value could not be parsed into a GeographicSize object because two delimited values are required (Width, Height)..
        /// </summary>
        internal static string GeographicSize_InvalidFormat {
            get {
                return ResourceManager.GetString("GeographicSize_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
        /// </summary>
        internal static string Latitude_DecimalOrSexagesimalRequired {
            get {
                return ResourceManager.GetString("Latitude_DecimalOrSexagesimalRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Latitude can only be compared with another Latitude, Double or String..
        /// </summary>
        internal static string Latitude_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Latitude_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as a latitude..
        /// </summary>
        internal static string Latitude_InvalidFormat {
            get {
                return ResourceManager.GetString("Latitude_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;North&apos; or &apos;South&apos; is required..
        /// </summary>
        internal static string Latitude_InvalidHemisphere {
            get {
                return ResourceManager.GetString("Latitude_InvalidHemisphere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hemisphere specified indicates a longitude but a latitude is expected..
        /// </summary>
        internal static string Latitude_LatitudeHemisphereExpected {
            get {
                return ResourceManager.GetString("Latitude_LatitudeHemisphereExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the right-most number can be a floating-point value..
        /// </summary>
        internal static string Latitude_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Latitude_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Parse method requires a decimal or sexagesimal measurement..
        /// </summary>
        internal static string Longitude_DecimalOrSexagesimalRequired {
            get {
                return ResourceManager.GetString("Longitude_DecimalOrSexagesimalRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Longitude can only be compared with another Longitude, Double or String..
        /// </summary>
        internal static string Longitude_InvalidComparisonType {
            get {
                return ResourceManager.GetString("Longitude_InvalidComparisonType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as a longitude..
        /// </summary>
        internal static string Longitude_InvalidFormat {
            get {
                return ResourceManager.GetString("Longitude_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hemisphere specified for the ToHemisphere method cannot be &apos;None&apos;.  A value of &apos;East&apos; or &apos;West&apos; is required..
        /// </summary>
        internal static string Longitude_InvalidHemisphere {
            get {
                return ResourceManager.GetString("Longitude_InvalidHemisphere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hemisphere specified indicates a latitude but a longitude is expected..
        /// </summary>
        internal static string Longitude_LongitudeHemisphereExpected {
            get {
                return ResourceManager.GetString("Longitude_LongitudeHemisphereExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the right-most number can be a floating-point value..
        /// </summary>
        internal static string Longitude_OnlyRightmostIsDecimal {
            get {
                return ResourceManager.GetString("Longitude_OnlyRightmostIsDecimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate UTM zone information was found when trying to parse a UTM coordinate..
        /// </summary>
        internal static string Position_DuplicateZoneInformation {
            get {
                return ResourceManager.GetString("Position_DuplicateZoneInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as a spherical or UTM coordinate..
        /// </summary>
        internal static string Position_InvalidFormat {
            get {
                return ResourceManager.GetString("Position_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified string could not be recognized as a valid UTM coordinate..
        /// </summary>
        internal static string Position_InvalidUTMCoordinate {
            get {
                return ResourceManager.GetString("Position_InvalidUTMCoordinate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A UTM zone letter can only be one character long.  Multiple characters were encountered..
        /// </summary>
        internal static string Position_InvalidZoneLetter {
            get {
                return ResourceManager.GetString("Position_InvalidZoneLetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A UTM zone number can only be one or two characters long.  Multiple characters were encountered..
        /// </summary>
        internal static string Position_InvalidZoneNumber {
            get {
                return ResourceManager.GetString("Position_InvalidZoneNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No UTM zone letter could be located within the specified string..
        /// </summary>
        internal static string Position_NoUTMZoneLetter {
            get {
                return ResourceManager.GetString("Position_NoUTMZoneLetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No UTM zone number could be located within the specified string..
        /// </summary>
        internal static string Position_NoUTMZoneNumber {
            get {
                return ResourceManager.GetString("Position_NoUTMZoneNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total area could not be calculated..
        /// </summary>
        internal static string PositionCollection_AreaError {
            get {
                return ResourceManager.GetString("PositionCollection_AreaError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The total distance could not be calculated..
        /// </summary>
        internal static string PositionCollection_DistanceError {
            get {
                return ResourceManager.GetString("PositionCollection_DistanceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range must be a distance greater than or equal to zero..
        /// </summary>
        internal static string PositionCollection_RangeMustBeAboveZero {
            get {
                return ResourceManager.GetString("PositionCollection_RangeMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Height must be a number greater than zero..
        /// </summary>
        internal static string RectangleD_HeightMustBeAboveZero {
            get {
                return ResourceManager.GetString("RectangleD_HeightMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value could not be parsed into a RectangleD object because four delimited values are required (Top, Left, Bottom, Right)..
        /// </summary>
        internal static string RectangleD_InvalidFormat {
            get {
                return ResourceManager.GetString("RectangleD_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Width must be a number greater than zero..
        /// </summary>
        internal static string RectangleD_WidthMustBeAboveZero {
            get {
                return ResourceManager.GetString("RectangleD_WidthMustBeAboveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two values must be supplied to create a SizeD object from a string.  Verify that the CultureInfo passed matches the delimiter used to separate the values..
        /// </summary>
        internal static string SizeD_InvalidFormat {
            get {
                return ResourceManager.GetString("SizeD_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified format could not be fully recognized as a speed measurement..
        /// </summary>
        internal static string Speed_InvalidFormat {
            get {
                return ResourceManager.GetString("Speed_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The numeric portion of the speed measurement could not be recognized..
        /// </summary>
        internal static string Speed_InvalidNumericPortion {
            get {
                return ResourceManager.GetString("Speed_InvalidNumericPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unit portion of the speed measurement could not be recognized..
        /// </summary>
        internal static string Speed_InvalidUnitPortion {
            get {
                return ResourceManager.GetString("Speed_InvalidUnitPortion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trial License Expires {0} ({1} days remaining).
        /// </summary>
        internal static string TrialLicense_ExpirationDate {
            get {
                return ResourceManager.GetString("TrialLicense_ExpirationDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Would you like to go online to try and extend your free trial now?.
        /// </summary>
        internal static string TrialLicense_ExtendTrial {
            get {
                return ResourceManager.GetString("TrialLicense_ExtendTrial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchased license keys cannot be used as trial license keys.  Please use another key or contact DotSpatial.Positioning for further assistance..
        /// </summary>
        internal static string TrialLicense_InvalidLicenseKey {
            get {
                return ResourceManager.GetString("TrialLicense_InvalidLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, the trial key for the following DotSpatial.Positioning assembly expired on {0}.  You can go online to try and extend your trial another month, or you can purchase a license key online.\r\n\r\n{1}.
        /// </summary>
        internal static string TrialLicense_LicenseExpired {
            get {
                return ResourceManager.GetString("TrialLicense_LicenseExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DotSpatial.Positioning Trial Has Expired.
        /// </summary>
        internal static string TrialLicense_LicenseExpiredDialogTitle {
            get {
                return ResourceManager.GetString("TrialLicense_LicenseExpiredDialogTitle", resourceCulture);
            }
        }
    }
}
