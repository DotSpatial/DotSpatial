<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeNegative_S" xml:space="preserve">
    <value>L'argument %S ne peut pas être négatif.</value>
  </data>
  <data name="ArgumentCouldNotBeCast_S1_S2" xml:space="preserve">
    <value>L'argument %S1 ne peut pas être converti en %S2.</value>
  </data>
  <data name="ArgumentOutOfRangeException_S" xml:space="preserve">
    <value>L'argument %S est en dehors de l'intervalle des valeurs accèptées.</value>
  </data>
  <data name="ClassNotSupportedException_S" xml:space="preserve">
    <value>La classe %S n'est pas supportée.</value>
  </data>
  <data name="CoordinateMismatchException" xml:space="preserve">
    <value>Le nombre de coordonnées ne correspond pas aux dimensions, donc l'hyperdistance ne peut pas être correctement calculatée.</value>
  </data>
  <data name="DuplicateEdgeException" xml:space="preserve">
    <value>Le même segment orienté apparaît plusieurs.</value>
  </data>
  <data name="GeometryCollectionNotSupportedException" xml:space="preserve">
    <value>Les Collections  de Géométrie ne sont pas  supportées par cette procédure.</value>
  </data>
  <data name="InsufficientDimensions" xml:space="preserve">
    <value>Les dimensions dans aumoins un argument sont insuffisantes pour ce calcul.</value>
  </data>
  <data name="InsufficientDimensions_S" xml:space="preserve">
    <value>Les dimensions dans %S sont insuffisantes pour ce calcul.</value>
  </data>
  <data name="InvalidOctantException_S" xml:space="preserve">
    <value>Un octant invalide a été indiqué: %S</value>
  </data>
  <data name="KeyDuplicateException" xml:space="preserve">
    <value>La clé indiquée existe déjà dans la structure.</value>
  </data>
  <data name="KeyMissingException" xml:space="preserve">
    <value>La clé indiquée est introuvable dans la structure.</value>
  </data>
  <data name="KeySizeException" xml:space="preserve">
    <value>La taille de la clé ne correspond pas à la taille de la structure.</value>
  </data>
  <data name="NullEdgeException" xml:space="preserve">
    <value>Un segement orienté null trouvé dans un anneau</value>
  </data>
  <data name="PolygonException_HoleElementNull" xml:space="preserve">
    <value>Les trous ne devraient pas contenir des éléments nulls</value>
  </data>
  <data name="PolygonException_ShellEmptyButHolesNot" xml:space="preserve">
    <value>La périphérie est null alors que les trous ne le sont pas.</value>
  </data>
  <data name="ReadOnlyException" xml:space="preserve">
    <value>ICollection est en lecture seule.</value>
  </data>
  <data name="ShellHoleIdentityException" xml:space="preserve">
    <value>Les points sur la périphérie et les trous semblent être les même.</value>
  </data>
  <data name="ShouldNeverReachHereException" xml:space="preserve">
    <value>Le code d'exécution ne devrait jamais atteindre ce point.</value>
  </data>
  <data name="SideLocationConflict" xml:space="preserve">
    <value>Conflit de limite à</value>
  </data>
  <data name="SingleNullSide" xml:space="preserve">
    <value>Limite nulle trouvée à</value>
  </data>
  <data name="TopologyException_Depth" xml:space="preserve">
    <value>La profondeur indiquée ne correspond pas</value>
  </data>
  <data name="TwoHorizontalEdgesException" xml:space="preserve">
    <value>Deux segments horizontaux aboutissent à un noeud.</value>
  </data>
  <data name="UnsupportedGeometryException" xml:space="preserve">
    <value>Les classes de Géométrie non supportées devraient être supprimées dans le GeometryEditorOperation.</value>
  </data>
  <data name="NodedSegmentString_WrongParameterSize" xml:space="preserve">
    <value>Le paramètre doit être plus grand que 0 et moins grand que TotalItemCount.</value>
  </data>
  <data name="NodedSegmentString_UnsupportedSettingLinesegments" xml:space="preserve">
    <value>Intégrer line segments dans un ISegmentString n'est pas supporté.</value>
  </data>
  <data name="WktWriter_WrongOutputDimension" xml:space="preserve">
    <value>La dimension resultante doit être dans l'intervalle [2, 3]</value>
  </data>
  <data name="WktWriter_NegativeTabCount" xml:space="preserve">
    <value>Le nombre d'onglet doit être positif</value>
  </data>
  <data name="NodingValidator_FoundNonNodedIntersection" xml:space="preserve">
    <value>Une intersection sans noeud à {0}-{1} and {2}-{3}</value>
  </data>
  <data name="NodingValidator_FoundEndPointInteriorPointIntersection" xml:space="preserve">
    <value>Une intersection endpoint/interior point a été trouvée 0 l'index {0} :pt {1}</value>
  </data>
  <data name="NodingValidator_FoundNonNodedCollapse" xml:space="preserve">
    <value>Un recouvrement sans noeud à: {0}, {1} {2}</value>
  </data>
  <data name="FastNodingValidator_NoIntersectionFound" xml:space="preserve">
    <value>Aucune intersection trouvée</value>
  </data>
  <data name="FastNodingValidator_FoundNonNodedIntersection" xml:space="preserve">
    <value>Intersection sans noeud trouvée entre {0} et {1} </value>
  </data>
  <data name="CharBuffer_IndexToBig" xml:space="preserve">
    <value>L'index Tail est au delà de la capacité</value>
  </data>
</root>